-- A DUT entity is used to wrap your design.
--  This example shows how you can do this for the
--  Full-adder.

library ieee;
use ieee.std_logic_1164.all;
entity DUT is
   port(input_vector: in std_logic_vector(3 downto 0);
       	output_vector: out std_logic_vector(7 downto 0));
end entity;

architecture DutWrap of DUT is
   component bit7shift is
     generic(
        operand_width : integer:=4;
        ) ;
    port (
        A: in std_logic_vector(operand_width-1 downto 0);
        op: out std_logic_vector((operand_width*2)-1 downto 0)
    ) ;
	  end component;
begin

   -- input/output vector element ordering is critical,
   -- and must match the ordering in the trace file!
   add_instance: bit7shift
			port map (
					-- order of inputs Cin B A

					A => input_vector(3 downto 0),
                  
						-- order of outputs S Cout
				
					
				
					op => output_vector(7 downto 0));

end DutWrap;

